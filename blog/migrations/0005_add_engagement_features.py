# Generated by Django 5.2.3 on 2025-07-25 06:57

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0004_category_parent_post_meta_data_alter_post_status_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(help_text='Name of the comment author', max_length=100)),
                ('author_email', models.EmailField(help_text='Email of the comment author (not displayed publicly)', max_length=254)),
                ('author_website', models.URLField(blank=True, help_text='Optional website URL of the comment author')),
                ('content', models.TextField(help_text='The comment content')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether this comment has been approved for display')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the commenter for moderation purposes')),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent for spam detection')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='SocialShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('facebook', 'Facebook'), ('twitter', 'Twitter'), ('linkedin', 'LinkedIn'), ('reddit', 'Reddit'), ('pinterest', 'Pinterest'), ('whatsapp', 'WhatsApp')], help_text='Social media platform where the post was shared', max_length=20)),
                ('share_count', models.PositiveIntegerField(default=0, help_text='Number of times this post has been shared on this platform')),
                ('last_shared', models.DateTimeField(auto_now=True, help_text='When this post was last shared on this platform')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-share_count'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Tag name (e.g., 'Python', 'Django')", max_length=50, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the tag name', unique=True)),
                ('color', models.CharField(default='#007acc', help_text='Hex color code for tag display (e.g., #007acc)', max_length=7)),
                ('description', models.TextField(blank=True, help_text='Optional description of what this tag represents')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AlterModelOptions(
            name='newslettersubscriber',
            options={'ordering': ['-subscribed_at']},
        ),
        migrations.AddField(
            model_name='newslettersubscriber',
            name='confirmation_token',
            field=models.CharField(blank=True, help_text='Token for email confirmation', max_length=64, unique=True),
        ),
        migrations.AddField(
            model_name='newslettersubscriber',
            name='confirmed_at',
            field=models.DateTimeField(blank=True, help_text='When the subscription was confirmed', null=True),
        ),
        migrations.AddField(
            model_name='newslettersubscriber',
            name='is_confirmed',
            field=models.BooleanField(default=False, help_text='Whether the email subscription has been confirmed'),
        ),
        migrations.AddField(
            model_name='newslettersubscriber',
            name='preferences',
            field=models.JSONField(blank=True, default=dict, help_text='Email preferences (frequency, categories, etc.)'),
        ),
        migrations.AddField(
            model_name='newslettersubscriber',
            name='unsubscribe_token',
            field=models.CharField(blank=True, help_text='Token for unsubscribing', max_length=64, unique=True),
        ),
        migrations.AddField(
            model_name='post',
            name='allow_comments',
            field=models.BooleanField(default=True, help_text='Allow readers to comment on this post.'),
        ),
        migrations.AddField(
            model_name='post',
            name='social_image',
            field=models.ImageField(blank=True, help_text='Custom image for social media sharing. If not provided, featured_image will be used.', null=True, upload_to='social_images/'),
        ),
        migrations.AddField(
            model_name='post',
            name='table_of_contents',
            field=models.BooleanField(default=True, help_text='Automatically generate table of contents for this post.'),
        ),
        migrations.AlterField(
            model_name='newslettersubscriber',
            name='email',
            field=models.EmailField(help_text="Subscriber's email address", max_length=254, unique=True, validators=[django.core.validators.EmailValidator()]),
        ),
        migrations.AddIndex(
            model_name='newslettersubscriber',
            index=models.Index(fields=['email'], name='blog_newsle_email_5fe47c_idx'),
        ),
        migrations.AddIndex(
            model_name='newslettersubscriber',
            index=models.Index(fields=['is_confirmed'], name='blog_newsle_is_conf_79cdf0_idx'),
        ),
        migrations.AddIndex(
            model_name='newslettersubscriber',
            index=models.Index(fields=['confirmation_token'], name='blog_newsle_confirm_f187a6_idx'),
        ),
        migrations.AddIndex(
            model_name='newslettersubscriber',
            index=models.Index(fields=['unsubscribe_token'], name='blog_newsle_unsubsc_2b2fb3_idx'),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='Parent comment for threaded replies', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='blog.comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(help_text='The blog post this comment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='blog.post'),
        ),
        migrations.AddField(
            model_name='socialshare',
            name='post',
            field=models.ForeignKey(help_text='The blog post that was shared', on_delete=django.db.models.deletion.CASCADE, related_name='social_shares', to='blog.post'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['name'], name='blog_tag_name_43b6ed_idx'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['slug'], name='blog_tag_slug_915fc6_idx'),
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='Select tags for this post to improve discoverability.', related_name='posts', to='blog.tag'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['post', 'is_approved'], name='blog_commen_post_id_7710b1_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['created_at'], name='blog_commen_created_4e025c_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['is_approved'], name='blog_commen_is_appr_be38d5_idx'),
        ),
        migrations.AddIndex(
            model_name='socialshare',
            index=models.Index(fields=['post', 'platform'], name='blog_social_post_id_7e7a25_idx'),
        ),
        migrations.AddIndex(
            model_name='socialshare',
            index=models.Index(fields=['share_count'], name='blog_social_share_c_41f7dc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='socialshare',
            unique_together={('post', 'platform')},
        ),
    ]
