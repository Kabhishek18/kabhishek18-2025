services:
  db:
    image: mysql:8.0
    container_name: mysql_db
    env_file:
      - .env.prod
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"  # optional if your app connects internally; keep for external tools
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 20s
      retries: 10

  # --- Cache & Message Broker (Redis) ---
  redis:
    image: redis:7.2-alpine
    container_name: redis_cache
    restart: unless-stopped

  # --- Django Application Service (Gunicorn) ---
  # Runs the main Django application using the Gunicorn WSGI server.
  app:
    build:
      context: .
      # Dockerfile is assumed to be in the root directory
    container_name: django_app
    # Load production environment variables from this file.
    env_file:
      - .env.prod
    volumes:
      # Named volumes for static and media files, shared with Nginx.
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      # Exposes port 8000 internally for Nginx to connect to.
      - 8000
    # Ensures the service restarts automatically if it fails.
    restart: unless-stopped
    # Wait for the database to be healthy before starting the app.
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    # The entrypoint script handles migrations and starts Gunicorn.
    command: /app/entrypoint.sh

  # --- Celery Worker Service ---
  # Executes asynchronous tasks defined in the Django application.
  celery_worker:
    build: .
    container_name: celery_worker
    env_file:
      - .env.prod
    command: celery -A kabhishek18 worker -l info
    depends_on:
      - redis
      - app
    restart: unless-stopped

  # --- Celery Beat Scheduler Service ---
  # Schedules and triggers periodic tasks.
  celery_beat:
    build: .
    container_name: celery_beat
    env_file:
      - .env.prod
    command: celery -A kabhishek18 beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - redis
      - app
    restart: unless-stopped

  # --- Web Server / Reverse Proxy (Nginx) ---
  # Serves static files directly and forwards dynamic requests to Django.
  nginx:
    image: nginx:1.25-alpine # Using a more recent version of Nginx
    container_name: nginx_server
    ports:
      # Maps port 8080 on the host to port 80 in the container.
      - "8080:80"
    volumes:
      # Mount the custom Nginx configuration.
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # Share volumes with the app service to serve static/media files.
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
    depends_on:
      - app
    restart: unless-stopped

# --- Named Volumes ---
# Defines the volumes used for persistent storage.
volumes:
  mysql_data:
  static_volume:
  media_volume:
